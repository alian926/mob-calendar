{"ast":null,"code":"import dayjs from'dayjs';import assign from'lodash/assign';import assignWith from'lodash/assignWith';import isUndefined from'lodash/isUndefined';export function mergeProps(){function customizer(objValue,srcValue){return isUndefined(srcValue)?objValue:srcValue;}var ret=assign({},arguments.length<=0?undefined:arguments[0]);for(var i=1;i<arguments.length;i++){ret=assignWith(ret,i<0||arguments.length<=i?undefined:arguments[i],customizer);}return ret;}/**\n *\n * @param {*} dayjsDate dayjs对象\n */export var getStartDay=function getStartDay(dayjsDate){// 由于周日属于上一个周的, 如果第一天不是周日,需要减去一天进行调整\n// console.log(dayjsDate.format('YYYY/MM/DD d ddd'), dayjsDate.format('d'));\nif(Number(dayjsDate.format('d'))!==0){return dayjsDate.startOf('week');}return dayjsDate;};/**\n *\n * @param {*} dayjsDate dayjs对象\n */export var formatMonthDate=function formatMonthDate(dayjsDate){// 选中日期的当月第一天 即 某月1日\nvar currentMonthFirstDay=dayjsDate.startOf('month');// NOTE: 周日属于上一天的结束,需要再减去一天\n// 当月第一天所在周的 上周日,\nvar currentMonthStartDay=getStartDay(currentMonthFirstDay);// 上个月的第一天\nvar prevMonthFirstDay=currentMonthFirstDay.subtract(1,'month');// 上个月第一天所在周的开始\nvar prevMonthStartDay=getStartDay(prevMonthFirstDay);// 下个月的第一天\nvar nextMonthFirstDay=currentMonthFirstDay.add(1,'month');// 下个月第一天所在周的开始\nvar nextMonthStartDay=getStartDay(nextMonthFirstDay);/**\n     * dayjsDate             2022-01-05 周三\n     * currentMonthFirstDay  2022-01-01 周六\n     * currentMonthStartDay  2021-12-26 周日\n     * prevMonthFirstDay     2021-12-01 周六\n     * prevMonthStartDay     2021-11-28 周日\n     * nextMonthFirstDay     2022-02-01 周二\n     * nextMonthStartDay     2022-01-30 周日\n     */ // 日期 6 * 7 即 42个数据\nreturn{currentMonthFirstDay:currentMonthFirstDay,monthDates:[new Array(42).fill('').map(function(_,index){return prevMonthStartDay.add(index,'day');}),new Array(42).fill('').map(function(_,index){return currentMonthStartDay.add(index,'day');}),new Array(42).fill('').map(function(_,index){return nextMonthStartDay.add(index,'day');})]};};/**\n *\n * @param {*} dayjsDate dayjs对象\n */export var formatWeekDate=function formatWeekDate(dayjsDate){var currentWeekStartDay=dayjsDate.startOf('week');var prevWeekStartDay=currentWeekStartDay.subtract(1,'week');var nextWeekStartDay=currentWeekStartDay.add(1,'week');return{currentWeekFirstDay:currentWeekStartDay.add(1,'day'),weekDates:[new Array(7).fill('').map(function(_,index){return prevWeekStartDay.add(index,'day');}),new Array(7).fill('').map(function(_,index){return currentWeekStartDay.add(index,'day');}),new Array(7).fill('').map(function(_,index){return nextWeekStartDay.add(index,'day');})]};};// 格式化年月显示\nexport var formatMonthYear=function formatMonthYear(date){if(dayjs().isSame(date,'year')){return dayjs(date).format('M月');}return dayjs(date).format('YYYY年MM月');};","map":{"version":3,"sources":["/Users/alian/Desktop/git-source/react-mob-calendar/src/utils/index.ts"],"names":["dayjs","assign","assignWith","isUndefined","mergeProps","customizer","objValue","srcValue","ret","i","length","getStartDay","dayjsDate","Number","format","startOf","formatMonthDate","currentMonthFirstDay","currentMonthStartDay","prevMonthFirstDay","subtract","prevMonthStartDay","nextMonthFirstDay","add","nextMonthStartDay","monthDates","Array","fill","map","_","index","formatWeekDate","currentWeekStartDay","prevWeekStartDay","nextWeekStartDay","currentWeekFirstDay","weekDates","formatMonthYear","date","isSame"],"mappings":"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","sourcesContent":["import dayjs, { Dayjs } from 'dayjs';\nimport assign from 'lodash/assign'\nimport assignWith from 'lodash/assignWith'\nimport isUndefined from 'lodash/isUndefined'\n\nexport function mergeProps<A, B>(a: A, b: B): B & A\nexport function mergeProps<A, B, C>(a: A, b: B, c: C): C & B & A\nexport function mergeProps(...items: any[]) {\n  function customizer(objValue: any, srcValue: any) {\n    return isUndefined(srcValue) ? objValue : srcValue\n  }\n\n  let ret = assign({}, items[0])\n  for (let i = 1; i < items.length; i++) {\n    ret = assignWith(ret, items[i], customizer)\n  }\n  return ret\n}\n\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\nexport const getStartDay = (dayjsDate: Dayjs) => {\n    // 由于周日属于上一个周的, 如果第一天不是周日,需要减去一天进行调整\n    // console.log(dayjsDate.format('YYYY/MM/DD d ddd'), dayjsDate.format('d'));\n    if (Number(dayjsDate.format('d')) !== 0) {\n        return dayjsDate.startOf('week');\n    }\n    return dayjsDate;\n};\n\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\nexport const formatMonthDate = (dayjsDate: Dayjs) => {\n    // 选中日期的当月第一天 即 某月1日\n    const currentMonthFirstDay = dayjsDate.startOf('month');\n    // NOTE: 周日属于上一天的结束,需要再减去一天\n    // 当月第一天所在周的 上周日,\n    const currentMonthStartDay = getStartDay(currentMonthFirstDay);\n    // 上个月的第一天\n    const prevMonthFirstDay = currentMonthFirstDay.subtract(1, 'month');\n    // 上个月第一天所在周的开始\n    const prevMonthStartDay = getStartDay(prevMonthFirstDay);\n    // 下个月的第一天\n    const nextMonthFirstDay = currentMonthFirstDay.add(1, 'month');\n    // 下个月第一天所在周的开始\n    const nextMonthStartDay = getStartDay(nextMonthFirstDay);\n\n    /**\n     * dayjsDate             2022-01-05 周三\n     * currentMonthFirstDay  2022-01-01 周六\n     * currentMonthStartDay  2021-12-26 周日\n     * prevMonthFirstDay     2021-12-01 周六\n     * prevMonthStartDay     2021-11-28 周日\n     * nextMonthFirstDay     2022-02-01 周二\n     * nextMonthStartDay     2022-01-30 周日\n     */\n\n    // 日期 6 * 7 即 42个数据\n    return {\n        currentMonthFirstDay,\n        monthDates: [\n            new Array(42)\n                .fill('')\n                .map((_, index) => prevMonthStartDay.add(index, 'day')),\n            new Array(42)\n                .fill('')\n                .map((_, index) => currentMonthStartDay.add(index, 'day')),\n            new Array(42)\n                .fill('')\n                .map((_, index) => nextMonthStartDay.add(index, 'day')),\n        ],\n    };\n};\n\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\nexport const formatWeekDate = (dayjsDate: Dayjs) => {\n    const currentWeekStartDay = dayjsDate.startOf('week');\n    const prevWeekStartDay = currentWeekStartDay.subtract(1, 'week');\n    const nextWeekStartDay = currentWeekStartDay.add(1, 'week');\n    return {\n        currentWeekFirstDay: currentWeekStartDay.add(1, 'day'),\n        weekDates: [\n            new Array(7)\n                .fill('')\n                .map((_, index) => prevWeekStartDay.add(index, 'day')),\n            new Array(7)\n                .fill('')\n                .map((_, index) => currentWeekStartDay.add(index, 'day')),\n            new Array(7)\n                .fill('')\n                .map((_, index) => nextWeekStartDay.add(index, 'day')),\n        ],\n    };\n};\n\n// 格式化年月显示\nexport const formatMonthYear = (date: Date | Dayjs): string => {\n    if (dayjs().isSame(date, 'year')) {\n        return dayjs(date).format('M月');\n    }\n    return dayjs(date).format('YYYY年MM月');\n};\n"]},"metadata":{},"sourceType":"module"}