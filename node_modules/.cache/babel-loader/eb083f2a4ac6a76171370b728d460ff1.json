{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useRef, useCallback } from 'react';\nimport isPlainObject from 'lodash/isPlainObject';\nexport function useSetState(initialState) {\n  _s();\n\n  if (!isPlainObject(initialState)) {\n    throw new Error('state is not Plain Object');\n  }\n\n  const [state, setState] = useState(initialState);\n  const setUseState = useCallback(patch => setState(prevState => ({ ...prevState,\n    ...(patch instanceof Function ? patch(prevState) : patch)\n  })), [setState]);\n  return [state, setUseState];\n}\n\n_s(useSetState, \"n3wElkTSKXmL2hUiLPyJhtoplhA=\");\n\nconst defaultShouldUpdate = (a, b) => a !== b;\n\nexport function usePrevious(state) {\n  _s2();\n\n  let shouldUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultShouldUpdate;\n  const prevRef = useRef();\n  const curRef = useRef();\n\n  if (shouldUpdate(curRef.current, state)) {\n    prevRef.current = curRef.current;\n    curRef.current = state;\n  }\n\n  return prevRef.current;\n}\n\n_s2(usePrevious, \"77jnnfHwFHRA6IkGj8sRP/XaICc=\");","map":{"version":3,"sources":["/Users/alian/Desktop/git-source/react-mob-calendar/src/utils/hooks.ts"],"names":["useState","useRef","useCallback","isPlainObject","useSetState","initialState","Error","state","setState","setUseState","patch","prevState","Function","defaultShouldUpdate","a","b","usePrevious","shouldUpdate","prevRef","curRef","current"],"mappings":";;;AAAA,SAAgBA,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AAQA,OAAO,SAASC,WAAT,CACHC,YADG,EAE8B;AAAA;;AACjC,MAAI,CAACF,aAAa,CAACE,YAAD,CAAlB,EAAkC;AAC9B,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACK,YAAD,CAAlC;AACA,QAAMI,WAA+B,GAAGP,WAAW,CAC/CQ,KAAK,IACDF,QAAQ,CAACG,SAAS,KAAK,EACnB,GAAGA,SADgB;AAEnB,QAAID,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACC,SAAD,CAAjC,GAA+CD,KAAnD;AAFmB,GAAL,CAAV,CAFmC,EAM/C,CAACF,QAAD,CAN+C,CAAnD;AAQA,SAAO,CAACD,KAAD,EAAQE,WAAR,CAAP;AACH;;GAhBeL,W;;AAqBhB,MAAMS,mBAAmB,GAAG,CAAIC,CAAJ,EAAWC,CAAX,KAAqBD,CAAC,KAAKC,CAAvD;;AAEA,OAAO,SAASC,WAAT,CACLT,KADK,EAGU;AAAA;;AAAA,MADfU,YACe,uEADqBJ,mBACrB;AACf,QAAMK,OAAO,GAAGjB,MAAM,EAAtB;AACA,QAAMkB,MAAM,GAAGlB,MAAM,EAArB;;AAEA,MAAIgB,YAAY,CAACE,MAAM,CAACC,OAAR,EAAiBb,KAAjB,CAAhB,EAAyC;AACvCW,IAAAA,OAAO,CAACE,OAAR,GAAkBD,MAAM,CAACC,OAAzB;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBb,KAAjB;AACD;;AAED,SAAOW,OAAO,CAACE,OAAf;AACD;;IAbeJ,W","sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport isPlainObject from 'lodash/isPlainObject';\n\ntype Patch<State> = (\n    patch: Partial<State> | ((prevPatch: State) => Partial<State>)\n) => void;\n\ntype ExcludeT<State> = Exclude<Extract<State, object>, Function>;\n\nexport function useSetState<T>(\n    initialState: ExcludeT<T>\n): [ExcludeT<T>, Patch<ExcludeT<T>>] {\n    if (!isPlainObject(initialState)) {\n        throw new Error('state is not Plain Object');\n    }\n    const [state, setState] = useState(initialState);\n    const setUseState: Patch<ExcludeT<T>> = useCallback(\n        patch =>\n            setState(prevState => ({\n                ...prevState,\n                ...(patch instanceof Function ? patch(prevState) : patch),\n            })),\n        [setState]\n    );\n    return [state, setUseState];\n}\n\n\nexport type ShouldUpdateFunc<T> = (prev: T | undefined, next: T) => boolean;\n\nconst defaultShouldUpdate = <T>(a?: T, b?: T) => a !== b;\n\nexport function usePrevious<T>(\n  state: T,\n  shouldUpdate: ShouldUpdateFunc<T> = defaultShouldUpdate,\n): T | undefined {\n  const prevRef = useRef<T>();\n  const curRef = useRef<T>();\n\n  if (shouldUpdate(curRef.current, state)) {\n    prevRef.current = curRef.current;\n    curRef.current = state;\n  }\n\n  return prevRef.current;\n}\n"]},"metadata":{},"sourceType":"module"}