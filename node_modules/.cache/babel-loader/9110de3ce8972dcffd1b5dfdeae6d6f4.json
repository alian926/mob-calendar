{"ast":null,"code":"import dayjs from 'dayjs';\nimport assign from 'lodash/assign';\nimport assignWith from 'lodash/assignWith';\nimport isUndefined from 'lodash/isUndefined';\nexport function mergeProps() {\n  function customizer(objValue, srcValue) {\n    return isUndefined(srcValue) ? objValue : srcValue;\n  }\n\n  let ret = assign({}, arguments.length <= 0 ? undefined : arguments[0]);\n\n  for (let i = 1; i < arguments.length; i++) {\n    ret = assignWith(ret, i < 0 || arguments.length <= i ? undefined : arguments[i], customizer);\n  }\n\n  return ret;\n}\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\n\nexport const getStartDay = dayjsDate => {\n  // 由于周日属于上一个周的, 如果第一天不是周日,需要减去一天进行调整\n  // console.log(dayjsDate.format('YYYY/MM/DD d ddd'), dayjsDate.format('d'));\n  if (Number(dayjsDate.format('d')) !== 0) {\n    return dayjsDate.startOf('week');\n  }\n\n  return dayjsDate;\n};\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\n\nexport const formatMonthDate = dayjsDate => {\n  // 选中日期的当月第一天 即 某月1日\n  const currentMonthFirstDay = dayjsDate.startOf('month'); // NOTE: 周日属于上一天的结束,需要再减去一天\n  // 当月第一天所在周的 上周日,\n\n  const currentMonthStartDay = getStartDay(currentMonthFirstDay); // 上个月的第一天\n\n  const prevMonthFirstDay = currentMonthFirstDay.subtract(1, 'month'); // 上个月第一天所在周的开始\n\n  const prevMonthStartDay = getStartDay(prevMonthFirstDay); // 下个月的第一天\n\n  const nextMonthFirstDay = currentMonthFirstDay.add(1, 'month'); // 下个月第一天所在周的开始\n\n  const nextMonthStartDay = getStartDay(nextMonthFirstDay);\n  /**\n   * dayjsDate             2022-01-05 周三\n   * currentMonthFirstDay  2022-01-01 周六\n   * currentMonthStartDay  2021-12-26 周日\n   * prevMonthFirstDay     2021-12-01 周六\n   * prevMonthStartDay     2021-11-28 周日\n   * nextMonthFirstDay     2022-02-01 周二\n   * nextMonthStartDay     2022-01-30 周日\n   */\n  // 日期 6 * 7 即 42个数据\n\n  return {\n    currentMonthFirstDay,\n    monthDates: [new Array(42).fill('').map((_, index) => prevMonthStartDay.add(index, 'day')), new Array(42).fill('').map((_, index) => currentMonthStartDay.add(index, 'day')), new Array(42).fill('').map((_, index) => nextMonthStartDay.add(index, 'day'))]\n  };\n};\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\n\nexport const formatWeekDate = dayjsDate => {\n  const currentWeekStartDay = dayjsDate.startOf('week');\n  const prevWeekStartDay = currentWeekStartDay.subtract(1, 'week');\n  const nextWeekStartDay = currentWeekStartDay.add(1, 'week');\n  return {\n    currentWeekFirstDay: currentWeekStartDay.add(1, 'day'),\n    weekDates: [new Array(7).fill('').map((_, index) => prevWeekStartDay.add(index, 'day')), new Array(7).fill('').map((_, index) => currentWeekStartDay.add(index, 'day')), new Array(7).fill('').map((_, index) => nextWeekStartDay.add(index, 'day'))]\n  };\n}; // 格式化年月显示\n\nexport const formatMonthYear = date => {\n  if (dayjs().isSame(date, 'year')) {\n    return dayjs(date).format('M月');\n  }\n\n  return dayjs(date).format('YYYY年MM月');\n};","map":{"version":3,"sources":["/Users/alian/Desktop/git-source/react-mob-calendar/src/utils/index.ts"],"names":["dayjs","assign","assignWith","isUndefined","mergeProps","customizer","objValue","srcValue","ret","i","length","getStartDay","dayjsDate","Number","format","startOf","formatMonthDate","currentMonthFirstDay","currentMonthStartDay","prevMonthFirstDay","subtract","prevMonthStartDay","nextMonthFirstDay","add","nextMonthStartDay","monthDates","Array","fill","map","_","index","formatWeekDate","currentWeekStartDay","prevWeekStartDay","nextWeekStartDay","currentWeekFirstDay","weekDates","formatMonthYear","date","isSame"],"mappings":"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","sourcesContent":["import dayjs, { Dayjs } from 'dayjs';\nimport assign from 'lodash/assign'\nimport assignWith from 'lodash/assignWith'\nimport isUndefined from 'lodash/isUndefined'\n\nexport function mergeProps<A, B>(a: A, b: B): B & A\nexport function mergeProps<A, B, C>(a: A, b: B, c: C): C & B & A\nexport function mergeProps(...items: any[]) {\n  function customizer(objValue: any, srcValue: any) {\n    return isUndefined(srcValue) ? objValue : srcValue\n  }\n\n  let ret = assign({}, items[0])\n  for (let i = 1; i < items.length; i++) {\n    ret = assignWith(ret, items[i], customizer)\n  }\n  return ret\n}\n\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\nexport const getStartDay = (dayjsDate: Dayjs) => {\n    // 由于周日属于上一个周的, 如果第一天不是周日,需要减去一天进行调整\n    // console.log(dayjsDate.format('YYYY/MM/DD d ddd'), dayjsDate.format('d'));\n    if (Number(dayjsDate.format('d')) !== 0) {\n        return dayjsDate.startOf('week');\n    }\n    return dayjsDate;\n};\n\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\nexport const formatMonthDate = (dayjsDate: Dayjs) => {\n    // 选中日期的当月第一天 即 某月1日\n    const currentMonthFirstDay = dayjsDate.startOf('month');\n    // NOTE: 周日属于上一天的结束,需要再减去一天\n    // 当月第一天所在周的 上周日,\n    const currentMonthStartDay = getStartDay(currentMonthFirstDay);\n    // 上个月的第一天\n    const prevMonthFirstDay = currentMonthFirstDay.subtract(1, 'month');\n    // 上个月第一天所在周的开始\n    const prevMonthStartDay = getStartDay(prevMonthFirstDay);\n    // 下个月的第一天\n    const nextMonthFirstDay = currentMonthFirstDay.add(1, 'month');\n    // 下个月第一天所在周的开始\n    const nextMonthStartDay = getStartDay(nextMonthFirstDay);\n\n    /**\n     * dayjsDate             2022-01-05 周三\n     * currentMonthFirstDay  2022-01-01 周六\n     * currentMonthStartDay  2021-12-26 周日\n     * prevMonthFirstDay     2021-12-01 周六\n     * prevMonthStartDay     2021-11-28 周日\n     * nextMonthFirstDay     2022-02-01 周二\n     * nextMonthStartDay     2022-01-30 周日\n     */\n\n    // 日期 6 * 7 即 42个数据\n    return {\n        currentMonthFirstDay,\n        monthDates: [\n            new Array(42)\n                .fill('')\n                .map((_, index) => prevMonthStartDay.add(index, 'day')),\n            new Array(42)\n                .fill('')\n                .map((_, index) => currentMonthStartDay.add(index, 'day')),\n            new Array(42)\n                .fill('')\n                .map((_, index) => nextMonthStartDay.add(index, 'day')),\n        ],\n    };\n};\n\n/**\n *\n * @param {*} dayjsDate dayjs对象\n */\nexport const formatWeekDate = (dayjsDate: Dayjs) => {\n    const currentWeekStartDay = dayjsDate.startOf('week');\n    const prevWeekStartDay = currentWeekStartDay.subtract(1, 'week');\n    const nextWeekStartDay = currentWeekStartDay.add(1, 'week');\n    return {\n        currentWeekFirstDay: currentWeekStartDay.add(1, 'day'),\n        weekDates: [\n            new Array(7)\n                .fill('')\n                .map((_, index) => prevWeekStartDay.add(index, 'day')),\n            new Array(7)\n                .fill('')\n                .map((_, index) => currentWeekStartDay.add(index, 'day')),\n            new Array(7)\n                .fill('')\n                .map((_, index) => nextWeekStartDay.add(index, 'day')),\n        ],\n    };\n};\n\n// 格式化年月显示\nexport const formatMonthYear = (date: Date | Dayjs): string => {\n    if (dayjs().isSame(date, 'year')) {\n        return dayjs(date).format('M月');\n    }\n    return dayjs(date).format('YYYY年MM月');\n};\n"]},"metadata":{},"sourceType":"module"}